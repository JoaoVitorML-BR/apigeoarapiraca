var knex = require('../../database/connection');

interface CpuCompatibility {
  amdcpu_id: number;
  cpu_name: string;
}

export interface AmdCpus {
  amcpuname: String,
  amdcpugen: number,
  amdcpuversion: number
}

class AmdCpusModels {

  async findAllCpu(): Promise<AmdCpus[]> {
    try {
      var result = await knex.select(['id', 'amdcpuname', 'amdcpugen', 'amdcpuversion'])
        .table('amdcpus');
      return result;
    } catch (err) {
      console.log(err);
      return [];
    };
  };

  async findByIdCpu(id: number): Promise<AmdCpus | undefined> {
    try {
      var result: AmdCpus[] = await knex.select(['id', 'amdcpuname', 'amdcpugen', 'amdcpuversion'])
        .where({ id: id })
        .table('amdcpus');

      if (result.length > 0) {
        return result[0];
      } else {
        return undefined;
      }
    } catch (err) {
      console.log(err);
      return undefined;
    };
  };

  async findByNameCpu(cpuname: string): Promise<AmdCpus | undefined> {
    var result: AmdCpus[] = await knex.select(['id', 'amdcpuname', 'amdcpugen', 'amdcpuversion'])
      .where({ amdcpuname: cpuname })
      .table('amdcpus');

    try {
      if (result.length > 0) {
        return result[0];
      } else {
        return undefined;
      }
    } catch (err) {
      console.log(err);
      return undefined;
    };
  };

  async createCpu(amdcpuname: string, amdcpugen: string, amdcpuversion: string): Promise<{ status: boolean; err?: string }> {
    try {
      await knex.insert({ amdcpuname, amdcpugen, amdcpuversion }).table('amdcpus');
      return { status: true };
    } catch (err) {
      console.log(err);
      return { status: false, err: 'Erro ao criar CPU' };
    }
  }

  async findNameCpu(cpuname: string): Promise<boolean> {
    try {
      var result: AmdCpus[] = await knex.select('*').from('amdcpus').where({ amdcpuname: cpuname });

      if (result.length > 0) {
        return true;
      } else {
        return false;
      }
    } catch (err) {
      console.log(err);
      return false;
    };
  };

  async UpdateCPU(id: number, amdcpuname: string, amdcpugen: string, amdcpuversion: string): Promise<{ status: boolean; err?: any }> {
    var oldcpu = await this.findByIdCpu(id);

    if (oldcpu != undefined) {
      var editCpu: {
        amdcpuname?: string;
        amdcpugen?: string;
        amdcpuversion?: string;
      } = {};

      if (amdcpuname == undefined || amdcpuname == '' || amdcpuname[0] == ' ' || amdcpugen == undefined || amdcpugen == '' || amdcpugen[0] == ' ' || amdcpuversion == undefined || amdcpuversion == '' || amdcpuversion[0] == ' ') {

        return { status: false, err: 'Nome de CPU, geração ou versão invalido.' };

      } else {

        editCpu.amdcpuname = amdcpuname;
        editCpu.amdcpugen = amdcpugen;
        editCpu.amdcpuversion = amdcpuversion;

        console.log(editCpu, ' CPU, geração e versão atualizada com sucesso!' + ' ||| Console update CPU - AmdCpusModels');

        try {
          await knex.update(editCpu).where({ id: id }).table('amdcpus');
          return { status: true };
        } catch (err) {
          return { status: false, err: err };
        };
      };
    } else {
      return { status: false, err: 'CPU não existe.' };
    };
  };

  async Delete(id: number): Promise<{ status: boolean; err?: string }> {
    const AmdCpu = await this.findByIdCpu(id);

    if (AmdCpu) {
      try {
        await knex('amdcpus').where({ id: id }).delete();
        return { status: true };
      } catch (err: any) {
        console.log(err);
        return { status: false, err: err.message || 'Erro desconhecido na exclusão da CPU.' };
      }
    } else {
      return { status: false, err: 'CPU não existe.' };
    }
  }

  async veryfingCpusCompatiblesMotheboard(id: number): Promise<CpuCompatibility[] | []> {
    try {
      var cpuscompatibles = await knex.select('amdcpu_id', 'cpu_name')
        .table('amdcpus_motheboards_memoryram')
        .where({ amdmotheboard_id: id })
        .innerJoin('amdcpus', 'amdcpus.id', 'amdcpus_motheboards_memoryram.amdcpu_id');

      var cpuscompatiblesFilter = new Map<number, CpuCompatibility>();

      cpuscompatibles.forEach((namecpu: CpuCompatibility) => {
        if (!cpuscompatiblesFilter.has(namecpu.amdcpu_id)) {
          cpuscompatiblesFilter.set(namecpu.amdcpu_id, namecpu);
        }
      });
      return [...cpuscompatiblesFilter.values()];
    } catch (err) {
      console.log('Erro ao selecionar o relacionamento MOTHEBOARD_AMD_CPU:', err);
      return []; // return a array free
    }
  }

};

module.exports = new AmdCpusModels();